#version 450

#include "rt_core/light.glsl"
// #include "rt_core/utils.glsl"


layout (local_size_x = 16, local_size_y = 16) in;

layout (binding = 0, rgba8) uniform writeonly image2D IMG;


vec3 pixelColor(inout Ray r)
{
    vec3 color = getColor(r);

    // Reflection
    if (REFLECTIONS)
    {
        float reflectionStrength = REFLECTIONSTRENGTH;
        for (int i = 0; i < RAYBOUNCES; i++)
        {
            vec3 reflectionColor = getColor(r);
            color = (1.0 - reflectionStrength) * color + reflectionStrength * mix(reflectionColor, color, 1.0 - reflectionStrength);
            reflectionStrength *= REFLECTIONFALLOFF;
        }
    }

    return color;
}


void main()
{
    ivec2 dim = imageSize(IMG);

    vec2 uv = vec2(gl_GlobalInvocationID.xy) / dim * 4 - 2;

    Ray r = Ray(
        ubo.camera.pos,
        normalize(vec3(uv * vec2(ubo.aspectRatio, 1), -2))
    );

    vec3 color = pixelColor(r);

    imageStore(IMG, ivec2(gl_GlobalInvocationID.xy), vec4(color, 1));
}
