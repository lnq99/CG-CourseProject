#version 450

#include "rt_core/light.glsl"


layout (local_size_x = 16, local_size_y = 16) in;

layout (binding = 0, rgba8) uniform writeonly image2D IMG;


vec3 pixelColor(inout Ray r)
{
    float kr = 1;
    vec3 color = getColor(r, kr);

    if (REFLECTIONS)
    {
        for (int i = 0; i < RAYBOUNCES; i++)
        {
            float reflectionStrength = kr;
            vec3 reflectionColor = getColor(r, kr);
            color = mix(color, mix(reflectionColor, color, 1.0 - reflectionStrength), reflectionStrength);
        }
    }

    return color;
}


void main()
{
    ivec2 dim = imageSize(IMG);

    vec2 uv = vec2(gl_GlobalInvocationID.xy) / dim * 2 - 1;

    Ray r = Ray(
        ubo.pos,
        normalize(vec3(ubo.rotMat * vec4(uv * vec2(ubo.aspectRatio, 1), 0, 0)) - normalize(ubo.pos))
    );

    vec3 color = pixelColor(r);

    imageStore(IMG, ivec2(gl_GlobalInvocationID.xy), vec4(color, 1));
}
